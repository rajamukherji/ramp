-- ROOT --

PLATFORM := defined("PLATFORM") or shell("uname"):trim
OS := defined("OS")
DEBUG := defined("DEBUG")

CFLAGS := ['-g']
LDFLAGS := ['-g']
ARFLAGS := []
PREBUILDS := []

if not DEBUG then
	CFLAGS := old + ['-O2']
end

c_compile := fun(Object) do
	var Source := Object % "c"
	execute('gcc -c {CFLAGS} -o{Object} {Source}')
end

c_includes := fun(Target) do
	var Files := []
	var Lines := shell('gcc -c {CFLAGS} -M -MG {Target:source}')
	var Files := Lines:trim:replace(r"\\\n ", "") / r"[^\\]( +)"
	Files:pop
	for File in Files do
		File := file(File:replace(r"\\ ", " "))
	end
	return Files
end

SourceTypes := {
	"c" is [c_includes, c_compile]
}

c_program := fun(Executable, Objects, Libraries) do
	Objects := Objects or []
	Libraries := Libraries or []
	var Sources := []
	for Object in Objects do
		for Extension, Functions in SourceTypes do
			var Source := Object % Extension
			if Source:exists then
				Sources:put(Source)
				var Scan := Source:scan("INCLUDES", :true)[PREBUILDS] => Functions[1]
				Object[Source, Scan] => Functions[2]
				exit
			end
		end
	end
	Executable[Objects, Libraries] => fun(Executable) do
		execute('gcc', '-o', Executable, Objects, Libraries, LDFLAGS)
		DEBUG or execute('strip', Executable)
	end
	DEFAULT[Executable]
end

c_library := fun(Library, Headers, Objects) do
	Objects := Objects or []
	var Sources := []
	for Object in Objects do
		for Extension, Functions in SourceTypes do
			var Source := Object % Extension
			if Source:exists then
				Sources:put(Source)
				var Scan := Source:scan("INCLUDES", :true)[PREBUILDS] => Functions[1]
				Object[Source, Scan] => Functions[2]
				exit
			end
		end
	end
	Library[Objects] => fun(Library) do
		execute('ar rcs', Library, Objects, ARFLAGS)
	end
	DEFAULT[Library]
	for var Header in Headers do
		var Target := (INC_DIR / (Header - PATH))[Header] => fun(Target) do
			Header:copy(Target)
		end
		DEFAULT[Target]
	end
end

PREFIX := old or PATH

print('PREFIX = {PREFIX}\n')

BIN_DIR := old or (PREFIX / "bin"):mkdir
LIB_DIR := old or (PREFIX / "lib"):mkdir
INC_DIR := old or (PREFIX / "include"):mkdir

vmount("obj", "src")
subdir("obj")
